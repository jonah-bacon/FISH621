dat.pz <- list.pf[list.pf$species=="Pzonatus",]
lm.pz <- lm(cpue ~ K_lag, data=dat.pz)
summary(lm.pz)
coef(lm.pz)
plot(x=dat.pz$K_lag, y=dat.pz$cpue, type="p",
pch=21, bg="blue",
xlab="Cumulative Catch (K t-1)",
ylab="CPUE",
main="Pzonatus")
abline(lm.pz, col=rgb(1,0,0, alpha=0.5), lwd=2)
# We will recall from lecture that our slope is our estimate of catchability (q)
q.pz <- abs(coef(lm.pz)[2])
q.pz
# And our intercept is equal to q*N0, where N0 is our initial population size
int.pz <- coef(lm.pz)[1]
int.pz
N0.pz <- int.pz/q.pz
N0.pz
# In order to use our Leslie depletion estimator we must fit our regression model
dat.ec <- list.pf[list.pf$species=="Ecarbunculus",]
head(dat.ec)
lm.ec <- lm(cpue ~ K_lag, data=dat.ec)
summary(lm.ec)
coef(lm.ec)
plot(x=dat.ec$K_lag, y=dat.ec$cpue, type="p",
pch=21, bg="blue",
xlab="Cumulative Catch (K t-1)",
ylab="CPUE",
main="Ecarbunculus")
abline(lm.ec, col=rgb(1,0,0, alpha=0.5), lwd=2)
# We will recall from lecture that our slope is our estimate of catchability (q)
q.ec <- abs(coef(lm.ec)[2])
q.ec
# And our intercept is equal to q*N0, where N0 is our initial population size
int.ec <- coef(lm.ec)[1]
int.ec
N0.ec <- int.ec/q.ec
N0.ec
# Exercise 1: Loading Required Packages ========================================
library(tidyverse)
library(ggthemes)
library(dplyr)
library(fishmethods)
# Load the Simple Schnabel dataset
schnab.dat <- read.csv("Simple Schnabel.csv")
# Load the Simple Schnabel dataset
schnab.dat <- read.csv("Simple Schnabel.csv")
# Inspect the object
head(schnab.dat)
# In this dataframe object, each sampling period is a separate row from 1 to
nrow(schnab.dat)
# Therefore, our total number of sampling periods "s" is
s <- nrow(schnab.dat)
schnab.dat$New_Marks <- schnab.dat$Captures - schnab.dat$Recaptures
# Let's look at our resulting object
schnab.dat
x <- 1:4
x
cumsum(x)
schnab.dat$Total_Marks <- cumsum(schnab.dat$New_Marks) - schnab.dat$New_Marks
# Lets see if this is correct
schnab.dat
# We will recall the standard notation for our objects:
i <- 1:s
ni <- schnab.dat$Captures
ni
mi <- schnab.dat$Recaptures
mi
ui <- schnab.dat$New_Marks
ui
# Or equivalently, ui =
ni - mi
Mi <- schnab.dat$Total_Marks
Mi
# Schnabel estimate:
schnabel.est <- sum(ni*Mi) / sum(mi)
schnabel.est
# or using the columns from our dataframe
sum(schnab.dat$Captures * schnab.dat$Total_Marks) / sum(schnab.dat$Recaptures)
# You will also recall from lecture that Chapman suggested an improvement to
#   reduce bias
schnabel_chap.est <- sum(ni*Mi) / ( sum(mi) + 1 )
schnabel_chap.est
# or using the columns from our dataframe
sum(schnab.dat$Captures * schnab.dat$Total_Marks) / ( sum(schnab.dat$Recaptures) + 1)
# First we calculate the VECTOR individual Petersen estimates
pete_ests <- (Mi[2:s] * ni[2:s]) / mi[2:s]
pete_ests
# Mean Petersen estimate:
pete.est <- mean(pete_ests)
pete.est
# or using the columns from our dataframe
mean( (schnab.dat$Total_Marks[2:s] * schnab.dat$Captures[2:s]) /
schnab.dat$Recaptures[2:s] )
# First we calculate the VECTOR of individual Chapman abundance estimates
chap_ests <- ( (Mi[2:s]+1)*(ni[2:s]+1) / (mi[2:s] + 1) ) -1
chap_ests
# Mean Chapman estimate:
chap.est <- mean(chap_ests)
chap.est
# or using the columns from our dataframe
mean( ( (schnab.dat$Total_Marks[2:s]+1)*(schnab.dat$Captures[2:s]+1) /
(schnab.dat$Recaptures[2:s] + 1) ) -1 )
# Our vector of Chapman variance estimates for esch sampling stage is:
chap_vars <- ((Mi[2:s]+1) * (ni[2:s]+1) * (Mi[2:s]-mi[2:s]) * (ni[2:s]-mi[2:s]) ) /
((mi[2:s]+1)^2 * (mi[2:s]+2) )
chap_vars
# We then take the mean of these variance estiamtes i = 2,3,...,s
chap.var_1 <- sum(chap_vars)/(s-1)^2
chap.var_1
# The standard error is thus
chap.se_1 <- sqrt(chap.var_1)
chap.se_1
# (2) Empirical (uses squared deviations)
# Under option #2 we we look at the difference between individual
#   Chapman abundance estimates across sampling periods 2-s (chap_ests) and the
#     Mean Chapman estimate (chap.est)
chap_ests
chap.est
chap.var_2 <- sum( (chap_ests-chap.est)^2 / ((s-1)*(s-2)) )
chap.var_2
# The standard error is thus
chap.se_2 <- sqrt(chap.var_2)
chap.se_2
# Our 95% confidence intervals can be calculated based on a t-statistic
#   with s-2 degrees of freedom
?qt
qt(p=0.975, df = s-2)
# So then, our confidence interval for our estimate using variance estimation
#   Method #1
chap.lb_1 <- chap.est - qt(p=0.975, df = s-2)*chap.se_1
chap.lb_1
chap.ub_1 <- chap.est + qt(p=0.975, df = s-2)*chap.se_1
chap.ub_1
# So then, our confidence interval for our estimate using variance estimation
#   Method #2
chap.lb_2 <- chap.est - qt(p=0.975, df = s-2)*chap.se_2
chap.lb_2
chap.ub_2 <- chap.est + qt(p=0.975, df = s-2)*chap.se_2
chap.ub_2
# Our 95% for the Mean Chapman estimator from our Schnabel experiment,
#   using variance estimation Method #1 is:
paste("Estimate:", round(chap.est,0),
"(", round(chap.lb_1,0), "-", round(chap.ub_1,0), ")")
# Our 95% for the Mean Chapman estimator from our Schnabel experiment,
#   using variance estimation Method #2 is:
paste("Estimate:", round(chap.est,0),
"(", round(chap.lb_2,0), "-", round(chap.ub_2,0), ")")
lambda <- sum(ni*Mi)
lambda
schnabel_chap.est
schnabel.lb <- lambda*( (2*sum(mi) + 1.96^2 - 1.96*sqrt(4*sum(mi+1.96^2))) /
(2*sum(mi)^2) )
schnabel.ub <- lambda*( (2*sum(mi) + 1.96^2 + 1.96*sqrt(4*sum(mi+1.96^2))) /
(2*sum(mi)^2) )
# Our 95% for the Schnabel estimator from our Schnabel experiment is:
paste("Estimate:", round(schnabel_chap.est,0),
"(", round(schnabel.lb,0), "-", round(schnabel.ub,0), ")")
# Method #1
paste("Estimate:", round(chap.est,0),
"(", round(chap.lb_1,0), "-", round(chap.ub_1,0), ")")
# Method #2
paste("Estimate:", round(chap.est,0),
"(", round(chap.lb_2,0), "-", round(chap.ub_2,0), ")")
ni <- schnab.dat$Captures
ni
mi <- schnab.dat$Recaptures
mi
ui <- schnab.dat$New_Marks
ui
Mi <- schnab.dat$Total_Marks
Mi
# Number of sampling periods
s <- nrow(schnab.dat)
# Let's begin by calculating yi
yi <- mi/ni
yi
barplot(yi, names.arg=1:s, xlab="Sampling Period", ylab="Proportion Recaptures")
plot(x=Mi, y=yi, pch=21, bg="blue",
xlab="Total Marks in Population",
ylab="Mark Fraction in Sample")
beta <- sum(ni[2:s]*yi[2:s]*Mi[2:s]) / sum(ni[2:s]*Mi[2:s]^2)
beta
# Or equivalently...
sum(mi[2:s]*Mi[2:s]) / sum(ni[2:s]*Mi[2:s]^2)
N_hat <- 1/beta
N_hat
lm.se <- lm(yi~ -1 + Mi, weights=ni)
summary(lm.se)
beta.lm  <- coef(lm.se)
N_hat.lm <- 1/beta.lm
N_hat.lm
library(fishmethods)
data(Gerking)
# Inspect the structure
str(Gerking)
?Gerking
View(schnab.dat)
View(Gerking)
s <- length(Gerking)
s <- nrow(Gerking)
Gerking$TM <- cumsum(Gerking$nM) - Gerking$nM
Mi <- Gerking$TM
ni <- Gerking$C
ni
mi <- Gerking$R
mi
ui <- Gerking$nM
ui
Gerking$TM <- cumsum(Gerking$nM) - Gerking$nM
Mi <- Gerking$TM
Mi
proportion.new.marked <- ui/ni
proportion.new.marked
gerk.chap.ests <- ( (Mi[2:s] + 1)*(ni[2:s] + 1) / (mi[2:s] + 1) ) - 1
gerk.chap.ests
gerk.mean.chap.est <- mean(gerk.chap.ests)
gerk.mean.chap.est
gerk.schnabel.est <- sum(ni*Mi) / ( sum(mi) + 1 ) # Question
gerk.schnabel.est
gerk.lambda <- sum(ni*Mi)
gerk.lambda
gerk.schnabel.lb <- lambda*( (2*sum(mi) + 1.96^2 - 1.96*sqrt(4*sum(mi+1.96^2))) /
(2*sum(mi)^2) )
gerk.schnabel.ub <- lambda*( (2*sum(mi) + 1.96^2 + 1.96*sqrt(4*sum(mi+1.96^2))) /
(2*sum(mi)^2) )
# Our 95% for the Schnabel estimator from our Schnabel experiment is:
paste("Estimate:", round(gerk.schnabel.est,0),
"(", round(gerk.schnabel.lb,0), "-", round(gerk.schnabel.ub,0), ")")
gerk.schnabel.lb
gerk.schnabel.ub
gerk.chap.vars <- ((Mi[2:s]+1) * (ni[2:s]+1) * (Mi[2:s]-mi[2:s]) * (ni[2:s]-mi[2:s]) ) /
((mi[2:s]+1)^2 * (mi[2:s]+2) )
gerk.chap.vars
gerk.chap.var_1 <- sum(gerk.chap.vars)/(s-1)^2
gerk.chap.var_1
gerk.chap.se_1 <- sqrt(gerk.chap.var_1)
gerk.chap.se_1
gerk.chap.vars <- ((Mi[2:s]+1) * (ni[2:s]+1) * (Mi[2:s]-mi[2:s]) * (ni[2:s]-mi[2:s]) ) /
((mi[2:s]+1)^2 * (mi[2:s]+2) )
gerk.chap.vars
gerk.chap.var_1 <- sum(gerk.chap.vars)/(s-1)^2
gerk.chap.var_1
gerk.chap.se_1 <- sqrt(gerk.chap.var_1)
gerk.chap.se_1
# Our vector of Chapman variance estimates for esch sampling stage is:
chap_vars <- ((Mi[2:s]+1) * (ni[2:s]+1) * (Mi[2:s]-mi[2:s]) * (ni[2:s]-mi[2:s]) ) /
((mi[2:s]+1)^2 * (mi[2:s]+2) )
chap_vars
# We then take the mean of these variance estiamtes i = 2,3,...,s
chap.var_1 <- sum(chap_vars)/(s-1)^2
chap.var_1
# The standard error is thus
chap.se_1 <- sqrt(chap.var_1)
chap.se_1
gerk.chap.lb_1 <- gerk.chap.est - qt(p=0.975, df = s-2)*gerk.chap.se_1
gerk.chap.lb_1
gerk.chap.lb_1 <- gerk.mean.chap.est - qt(p=0.975, df = s-2)*gerk.chap.se_1
gerk.chap.lb_1
gerk.chap.ub_1 <- gerk.mean.chap.est + qt(p=0.975, df = s-2)*gerk.chap.se_1
gerk.chap.ub_1
paste("Estimate:", round(gerk.mean.chap.est,0),
"(", round(gerk.chap.lb_1,0), "-", round(gerk.chap.ub_1,0), ")")
gerk.chap.var_2 <- sum( (gerk.chap.ests-gerk.mean.chap.est)^2 / ((s-1)*(s-2)) )
gerk.chap.var_2
# The standard error is thus
gerk.chap.se_2 <- sqrt(gerk.chap.var_2)
gerk.chap.se_2
gerk.chap.lb_2 <- gerk.mean.chap.est - qt(p=0.975, df = s-2)*gerk.chap.se_2
gerk.chap.lb_2
gerk.chap.ub_2 <- gerk.mean.chap.est + qt(p=0.975, df = s-2)*gerk.chap.se_2
gerk.chap.ub_2
paste("Estimate:", round(gerk.mean.chap.est,0),
"(", round(gerk.chap.lb_2,0), "-", round(gerk.chap.ub_2,0), ")")
ni <- schnab.dat$Captures
ni
mi <- schnab.dat$Recaptures
mi
ui <- schnab.dat$New_Marks
ui
Mi <- schnab.dat$Total_Marks
Mi
# Number of sampling periods
s <- nrow(schnab.dat)
ni <- Gerking$C
ni
mi <- Gerking$R
mi
ui <- Gerking$nM
ui
Mi <- Gerking$TM
Mi
yi <- mi/ni
yi
proportion.new.marked
barplot(yi, names.arg=1:s, xlab="Sampling Period", ylab="Proportion Recaptures")
s <- nrow(Gerking)
barplot(yi, names.arg=1:s, xlab="Sampling Period", ylab="Proportion Recaptures")
plot(x=Mi, y=yi, pch=21, bg="blue",
xlab="Total Marks in Population",
ylab="Mark Fraction in Sample")
beta <- sum(ni[2:s]*yi[2:s]*Mi[2:s]) / sum(ni[2:s]*Mi[2:s]^2)
beta
N_hat <- 1/beta
N_hat
lm.se <- lm(yi~ -1 + Mi, weights=ni)
summary(lm.se)
beta.lm  <- coef(lm.se)
N_hat.lm <- 1/beta.lm
N_hat.lm
gerk.beta <- sum(ni[2:s]*yi[2:s]*Mi[2:s]) / sum(ni[2:s]*Mi[2:s]^2)
gerk.beta
gerk.N_hat <- 1/gerk.beta
gerk.N_hat
gerk.lm.se <- lm(yi~ -1 + Mi, weights=ni)
summary(gerk.lm.se)
gerk.beta.lm  <- coef(gerk.lm.se)
gerk.N_hat.lm <- 1/gerk.beta.lm
gerk.N_hat.lm
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=FALSE)
library(RColorBrewer)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=FALSE)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=FALSE)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=FALSE)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=TRUE)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=FALSE)
#load ggplot2 and other useful packages
library(tidyverse)
#load package for combining figures
library(gridExtra)
#generate length and weight data for Channel Catfish and Largemouth Bass, and put in dataframe
length <- seq(from = 200, to = 500, by = 10)
species <- c(rep("lmb", 31), rep("cat", 31))
a_lmb <- (-5.528)
b_lmb <- (3.273)
a_cat <- (-5.800)
b_cat <- (3.294)
weight_lmb <- 10^(a_lmb + b_lmb * log10(length))
weight_cat <- 10^(a_cat + b_cat * log10(length))
weight <- c(weight_lmb, weight_cat)
length_weight_data <- data.frame(species, length, weight)
#make default ggplot figure with a legend and annotated label
len_wt_default <- ggplot(data = length_weight_data, aes(x = length, y = weight, fill = species)) +
geom_point() +
labs(title = "A")
#view the plot, will appear in R plotting window
len_wt_default
#view the plot, will appear in R plotting window
len_wt_default
#make ggplot figure that meets AFS style guidelines
len_wt_afs <- ggplot(data = length_weight_data, aes(x = length, y = weight, fill = species)) +
#set symbol shape and size
geom_point(shape = 21, size = 2) +
#set the limits and tick breaks for the y-axis
scale_y_continuous (limits = c(0,2400), expand = c(0,0), breaks = seq(0,2400,400)) +
#set the limits and tick spacing for the x-axis
scale_x_continuous(limits = c(100,600), expand = c(0,0), breaks = seq(100,600,100)) +
#adjust the order of the legend, make new labels, and select the symbol colors
scale_fill_manual(limits = c("lmb", "cat"), labels = c("Largemouth Bass", "Channel Catfish"), values = c("black", "white")) +
#add B to figure
ggtitle ("B") +
#label the y-axis
ylab("Weight (g)") +
#label the x-axis
xlab("Length (mm)") +
#add legend title, but left blank here because we want a legend but no title
labs(fill = "") +
#makes the figure background white without grid lines
theme_classic() +
#below are theme settings that provide unlimited control of your figure and can be a template for other figures
#set the size, spacing, and color for the y-axis and x-axis titles
theme (axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10, b = 0, l = 0), colour = "black"),
axis.title.x = element_text(size = 14, margin = margin(t = 10, r = 0, b = 0, l = 0), colour = "black"),
#set the font type
text = element_text(family = "Times New Roman"),
#modify plot title, the B in this case
plot.title = element_text(face = "bold", family = "Arial"),
#position the legend on the figure
legend.position = c(0.3,0.85),
#adjust size of text for legend
legend.text = element_text(size = 12),
#margin for the plot
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
#set size of the tick marks for y-axis
axis.ticks.y = element_line(size = 0.5),
#set size of the tick marks for x-axis
axis.ticks.x = element_line(size = 0.5),
#adjust length of the tick marks
axis.ticks.length = unit(0.2,"cm"),
#set size and location of the tick labels for the y axis
axis.text.y = element_text(colour = "black", size = 14, angle = 0, vjust = 0.5, hjust = 1,
margin = margin(t = 0, r = 5, b = 0, l = 0)),
#set size and location of the tick labels for the x axis
axis.text.x = element_text(colour = "black", size = 14, angle = 0, vjust = 0, hjust = 0.5,
margin = margin(t = 5, r = 0, b = 0, l = 0)),
#set the axis size, color, and end shape
axis.line = element_line(colour = "black", size = 0.5, lineend = "square"))
#make ggplot figure that meets AFS style guidelines
len_wt_afs <- ggplot(data = length_weight_data, aes(x = length, y = weight, fill = species)) +
#set symbol shape and size
geom_point(shape = 21, size = 2) +
#set the limits and tick breaks for the y-axis
scale_y_continuous (limits = c(0,2400), expand = c(0,0), breaks = seq(0,2400,400)) +
#set the limits and tick spacing for the x-axis
scale_x_continuous(limits = c(100,600), expand = c(0,0), breaks = seq(100,600,100)) +
#adjust the order of the legend, make new labels, and select the symbol colors
scale_fill_manual(limits = c("lmb", "cat"), labels = c("Largemouth Bass", "Channel Catfish"), values = c("black", "white")) +
#add B to figure
ggtitle ("B") +
#label the y-axis
ylab("Weight (g)") +
#label the x-axis
xlab("Length (mm)") +
#add legend title, but left blank here because we want a legend but no title
labs(fill = "") +
#makes the figure background white without grid lines
theme_classic() +
#below are theme settings that provide unlimited control of your figure and can be a template for other figures
#set the size, spacing, and color for the y-axis and x-axis titles
theme (axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10, b = 0, l = 0), colour = "black"),
axis.title.x = element_text(size = 14, margin = margin(t = 10, r = 0, b = 0, l = 0), colour = "black"),
#set the font type
text = element_text(family = "Times New Roman"),
#modify plot title, the B in this case
plot.title = element_text(face = "bold", family = "Arial"),
#position the legend on the figure
legend.position = c(0.3,0.85),
#adjust size of text for legend
legend.text = element_text(size = 12),
#margin for the plot
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
#set size of the tick marks for y-axis
axis.ticks.y = element_line(size = 0.5),
#set size of the tick marks for x-axis
axis.ticks.x = element_line(size = 0.5),
#adjust length of the tick marks
axis.ticks.length = unit(0.2,"cm"),
#set size and location of the tick labels for the y axis
axis.text.y = element_text(colour = "black", size = 14, angle = 0, vjust = 0.5, hjust = 1,
margin = margin(t = 0, r = 5, b = 0, l = 0)),
#set size and location of the tick labels for the x axis
axis.text.x = element_text(colour = "black", size = 14, angle = 0, vjust = 0, hjust = 0.5,
margin = margin(t = 5, r = 0, b = 0, l = 0)),
#set the axis size, color, and end shape
axis.line = element_line(colour = "black", size = 0.5, lineend = "square"))
#view the plot, will appear in R plotting window
len_wt_afs
ggplot_figure
#arrange the two plots side by side using the gridExtra package
ggplot_figure <- grid.arrange(len_wt_default, len_wt_afs, ncol = 2)
#make ggplot figure that meets AFS style guidelines
len_wt_afs <- ggplot(data = length_weight_data, aes(x = length, y = weight, fill = species)) +
#set symbol shape and size
geom_point(shape = 21, size = 2) +
#set the limits and tick breaks for the y-axis
scale_y_continuous (limits = c(0,2400), expand = c(0,0), breaks = seq(0,2400,400)) +
#set the limits and tick spacing for the x-axis
scale_x_continuous(limits = c(100,600), expand = c(0,0), breaks = seq(100,600,100)) +
#adjust the order of the legend, make new labels, and select the symbol colors
scale_fill_manual(limits = c("lmb", "cat"), labels = c("Largemouth Bass", "Channel Catfish"), values = c("black", "white")) +
#add B to figure
ggtitle ("B") +
#label the y-axis
ylab("Weight (g)") +
#label the x-axis
xlab("Length (mm)") +
#add legend title, but left blank here because we want a legend but no title
labs(fill = "") +
#makes the figure background white without grid lines
theme_classic() +
#below are theme settings that provide unlimited control of your figure and can be a template for other figures
#set the size, spacing, and color for the y-axis and x-axis titles
theme (axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10, b = 0, l = 0), colour = "black"),
axis.title.x = element_text(size = 14, margin = margin(t = 10, r = 0, b = 0, l = 0), colour = "black"),
#set the font type
text = element_text(family = "Times New Roman"),
#modify plot title, the B in this case
plot.title = element_text(face = "bold", family = "Arial"),
#position the legend on the figure
legend.position = c(0.3,0.85),
#adjust size of text for legend
legend.text = element_text(size = 12),
#margin for the plot
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
#set size of the tick marks for y-axis
axis.ticks.y = element_line(size = 0.5),
#set size of the tick marks for x-axis
axis.ticks.x = element_line(size = 0.5),
#adjust length of the tick marks
axis.ticks.length = unit(0.2,"cm"),
#set size and location of the tick labels for the y axis
axis.text.y = element_text(colour = "black", size = 14, angle = 0, vjust = 0.5, hjust = 1,
margin = margin(t = 0, r = 5, b = 0, l = 0)),
#set size and location of the tick labels for the x axis
axis.text.x = element_text(colour = "black", size = 14, angle = 0, vjust = 0, hjust = 0.5,
margin = margin(t = 5, r = 0, b = 0, l = 0)),
#set the axis size, color, and end shape
axis.line = element_line(colour = "black", size = 0.5, lineend = "square"))
#view the plot, will appear in R plotting window
len_wt_afs
